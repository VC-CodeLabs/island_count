"""
    Island counter solution
    t-REveor
    hyper effficient?
"""

import time


def get_island_maps():
    island_maps = []
    island_maps.append([
        ["1", "1", "0", "0", "0"],
        ["1", "1", "0", "0", "0"],
        ["0", "0", "1", "0", "0"],
        ["0", "0", "0", "1", "1"]
    ])
    island_maps.append([
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "0"],
        ["1", "1", "1", "1", "1", "1", "1", "0", "0", "0"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "0", "0"],
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "0"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "1"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "0", "0"],
        ["0", "0", "0", "1", "1", "1", "1", "0", "0", "0"]
    ])
    island_maps.append([
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "0"],
        ["1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "1", "1", "1", "1", "1", "0", "1", "0"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "0", "0", "1", "0", "0", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "0", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "1", "0", "1", "0", "1", "1", "0", "0", "1"],
        ["0", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "1", "0"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1"],
        ["0", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "0"],
        ["0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0"]
    ])
    island_maps.append([
        ["1", "1", "0", "0", "0", "1", "1", "0", "1", "0", "0", "0", "0", "1", "1", "0", "1", "0"],
        ["1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "0", "1", "0"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["1", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "1", "0", "1", "0", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1"],
        ["0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "1"]
    ])
    island_maps.append([
        ["1", "1", "0", "0", "0", "1", "1", "0", "1", "0", "0", "0", "0", "1", "1", "0", "1", "0", "1", "0", "0", "0", "1", "1", "0", "1", "0", "0", "0", "0", "1", "1", "0", "1", "0"],
        ["1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "0", "1", "0", "1", "0"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "1", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "0", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "1"],
        ["1", "0", "1", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "0", "0", "1", "0", "0", "1"],
        ["1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "0", "1", "0", "1", "1", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "1", "0", "1", "0", "0", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "0", "1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "0", "0", "1", "0", "0", "1", "1", "1", "0", "0", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "1", "0", "1", "0", "1", "1"],
        ["0", "1", "1", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "1", "1", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1", "0", "1", "0", "0", "1"],
        ["1", "1", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "1", "1", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1"],
        ["0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["1", "0", "1", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "0", "1", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["1", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "0", "1", "1", "0", "1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "1", "0", "1", "0", "1", "1", "0", "0", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "1", "0", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1"],
        ["0", "1", "1", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "1", "1", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "1", "1", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "1", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1"],
        ["0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "0", "1", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["1", "0", "1", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "0", "1", "0", "0", "1", "1", "0", "1", "0", "1", "0", "1", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["1", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "0", "1", "1", "0", "1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "1", "0", "1", "0", "1", "1", "0", "0", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "1", "0", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "0", "0", "0", "1", "1", "0", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1"],
        ["0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "1", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "1"]
    ])
    island_maps.append([
        ["1", "1", "0", "0", "0"],
        ["1", "1", "0", "0", "0"],
        ["0", "0", "1", "0", "0"],
        ["0", "0", "0", "1", "1"]
    ])
    return island_maps



def merge_buckets(island_buckets, w, n):
    # say merge_buckets([[3, 2], [1], [4, 5], [6]], 2, 6) should return [[3, 2, 6], [1], [4, 5]]
    merged_bucket = [c for bucket in island_buckets for c in bucket if w in bucket or n in bucket]
    other_buckets = [bucket for bucket in island_buckets if w not in bucket and n not in bucket]
    return [merged_bucket] + other_buckets


def get_island_count(island_map):
    c = 1
    island_buckets = []
    for j in range(len(island_map)):
        for i in range(len(island_map[0])):
            if island_map[j][i] == "1":
                w = island_map[j][i - 1] if i > 0 and island_map[j][i - 1] not in ["0", "1"] else None
                n = island_map[j - 1][i] if j > 0 and island_map[j - 1][i] not in ["0", "1"] else None
                if w is None and n is None:
                    island_buckets.append([c])
                    island_map[j][i] = c
                    c += 1
                elif w is None and n is not None:
                    island_map[j][i] = n
                elif w is not None and n is None:
                    island_map[j][i] = w
                elif any([bucket for bucket in island_buckets if w in bucket and n in bucket]):
                    island_map[j][i] = n
                else:
                    island_buckets = merge_buckets(island_buckets, w, n)
                    island_map[j][i] = n

    print(f'The number of islands is {len(island_buckets)}')


def main():
    data = get_island_maps()

    for island_map in data:
        start = time.perf_counter_ns()
        get_island_count(island_map)
        end = time.perf_counter_ns()
        print(f'Time taken = {round(end - start, 6)} ns')


if __name__ == '__main__':
    main()


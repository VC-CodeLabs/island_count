"""
    Island counter solution
    t-REveor
    hyper effficient?
"""

import time


def get_island_map():
    return [
        ["1", "1", "0", "0", "0"],
        ["1", "1", "0", "0", "0"],
        ["0", "0", "1", "0", "0"],
        ["0", "0", "0", "1", "1"]
    ]


def get_island_map2():
    return [
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "0"],
        ["1", "1", "1", "1", "1", "1", "1", "0", "0", "0"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "0", "0"],
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "0"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "1"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "0", "0"],
        ["0", "0", "0", "1", "1", "1", "1", "0", "0", "0"]
    ]


def get_island_map3():
    return [
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "0"],
        ["1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "1", "1", "1", "1", "1", "0", "1", "0"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "0", "0", "1", "0", "0", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "0", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "1", "0", "1", "0", "1", "1", "0", "0", "1"],
        ["0", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "1", "0"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1"],
        ["0", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "0"],
        ["0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0"]
    ]


def get_island_map4():
    return [
        ["1", "1", "0", "0", "0", "1", "1", "0", "1", "0", "0", "0", "0", "1", "1", "0", "1", "0"],
        ["1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "0", "1", "0"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["1", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "1", "0", "1", "0", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1"],
        ["0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "1"]
    ]


def get_island_map6():
    return [
        ["1", "1", "0", "0", "0", "1", "1", "0", "1", "0", "0", "0", "0", "1", "1", "0", "1", "0", "1", "0", "0", "0", "1", "1", "0", "1", "0", "0", "0", "0", "1", "1", "0", "1", "0"],
        ["1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "0", "1", "0", "1", "0"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "1", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "0", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "1"],
        ["1", "0", "1", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "0", "0", "1", "0", "0", "1"],
        ["1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "0", "1", "0", "1", "1", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "1", "0", "1", "0", "0", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "0", "1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "0", "0", "1", "0", "0", "1", "1", "1", "0", "0", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "0", "0", "0", "1", "0", "1", "0", "1", "1"],
        ["0", "1", "1", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "1", "1", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1", "0", "1", "0", "0", "1"],
        ["1", "1", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "1", "1", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "0", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1"],
        ["0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["1", "0", "1", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "0", "1", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["1", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "0", "1", "1", "0", "1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "1", "0", "1", "0", "1", "1", "0", "0", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "1", "0", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1"],
        ["0", "1", "1", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "1", "1", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "0", "0", "0", "1", "0", "0", "1", "0", "0", "1", "1", "1", "0", "0", "1", "1", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "1", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1"],
        ["0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "0", "1", "0", "0", "0", "1", "0", "1", "0", "1", "0", "1", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["1", "0", "1", "1", "0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "1", "1", "1", "1", "0", "1", "0", "1", "1", "1", "1", "1", "1"],
        ["0", "0", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "0", "1", "0", "0", "1", "1", "0", "1", "0", "1", "0", "1", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["1", "0", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "1", "1", "1", "0", "0", "1", "0", "1", "1", "0", "1", "1", "0", "0", "0", "1", "0", "1", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "1", "0", "1", "0", "1", "1", "0", "0", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "1", "0", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "0", "0", "0", "1", "1", "0", "1", "1", "0", "1", "1"],
        ["1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1", "1", "0", "1", "0", "1", "1", "0", "0", "0", "0", "0", "0", "1", "1", "0", "1", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "1", "1", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "1"],
        ["1", "1", "0", "0", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "1", "0", "0", "1", "1", "0", "0", "0", "1", "1", "0", "0", "1", "0", "0", "0", "1", "1", "0", "0", "1"],
        ["0", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0", "0", "1", "1", "1", "1", "1"],
        ["0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "1", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "1"]
    ]


def merge_buckets(island_buckets, w, n):
    # say merge_buckets([[3, 2], [1], [4, 5], [6]], 2, 6) should return [[3, 2, 6], [1], [4, 5]]
    merged_bucket = [c for bucket in island_buckets for c in bucket if w in bucket or n in bucket]
    other_buckets = [bucket for bucket in island_buckets if w not in bucket and n not in bucket]
    return [merged_bucket] + other_buckets


def main():
    data = get_island_map6()

    c = 1
    island_buckets = []
    for j in range(len(data)):
        for i in range(len(data[0])):
            if data[j][i] == "1":
                w = data[j][i - 1] if i > 0 and data[j][i - 1] not in ["0", "1"] else None
                n = data[j - 1][i] if j > 0 and data[j - 1][i] not in ["0", "1"] else None
                if w is None and n is None:
                    island_buckets.append([c])
                    data[j][i] = c
                    c += 1
                elif w is None and n is not None:
                    data[j][i] = n
                elif w is not None and n is None:
                    data[j][i] = w
                elif any([bucket for bucket in island_buckets if w in bucket and n in bucket]):
                    data[j][i] = n
                else:
                    island_buckets = merge_buckets(island_buckets, w, n)
                    data[j][i] = n

    # for row in data:
    #     print(row)
    # print(f'buckets: {island_buckets}')
    print(f'The number of buckets is {len(island_buckets)}')


if __name__ == '__main__':
    start = time.perf_counter()
    main()
    end = time.perf_counter()
    print(f'Time taken = {round(end - start, 6)}')

